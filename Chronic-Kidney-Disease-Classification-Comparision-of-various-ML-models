{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":5830535,"sourceType":"datasetVersion","datasetId":3351346},{"sourceId":5830581,"sourceType":"datasetVersion","datasetId":3351376}],"dockerImageVersionId":30498,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Import Required library","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import GridSearchCV, train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import r2_score\nimport scipy.stats as stats\nimport seaborn as sns\n\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:04:30.014992Z","iopub.execute_input":"2023-06-03T05:04:30.015440Z","iopub.status.idle":"2023-06-03T05:04:30.025635Z","shell.execute_reply.started":"2023-06-03T05:04:30.015407Z","shell.execute_reply":"2023-06-03T05:04:30.024613Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data load and Preprocess","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/modifedckd/ckd-dataset-v2(edited).csv')\ndf.drop(index=[0,1], axis=0, inplace=True)\ndf.drop(['stage','affected'], axis=1, inplace=True)\ndf['class'] = df['class'].map({'ckd':1,'notckd':0})\n\ndf.head()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:04:37.964589Z","iopub.execute_input":"2023-06-03T05:04:37.965261Z","iopub.status.idle":"2023-06-03T05:04:38.020258Z","shell.execute_reply.started":"2023-06-03T05:04:37.965229Z","shell.execute_reply":"2023-06-03T05:04:38.019292Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"df.info()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:04:43.968995Z","iopub.execute_input":"2023-06-03T05:04:43.969432Z","iopub.status.idle":"2023-06-03T05:04:43.993413Z","shell.execute_reply.started":"2023-06-03T05:04:43.969380Z","shell.execute_reply":"2023-06-03T05:04:43.992476Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Name of columns","metadata":{}},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:04:49.805245Z","iopub.execute_input":"2023-06-03T05:04:49.805656Z","iopub.status.idle":"2023-06-03T05:04:49.816947Z","shell.execute_reply.started":"2023-06-03T05:04:49.805614Z","shell.execute_reply":"2023-06-03T05:04:49.815744Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Define function for preprocess\n    ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ncols=df.columns\n\ndef preprocess_range(range_value):\n    if isinstance(range_value, str):\n        range_value = range_value.strip()  # Remove leading/trailing spaces\n        if range_value.replace('.', '', 1).isdigit():  # Check if it is a valid numeric value\n            return float(range_value)\n        elif '-' in range_value:\n            lower, upper = map(float, range_value.split('-'))\n            return (lower + upper) / 2\n        elif '≥' in range_value:\n            return float(range_value[2:])\n        elif '<' in range_value:\n            return float(range_value[1:])\n    elif isinstance(range_value, (int, float)):\n        return range_value\n    return range_value\n\n\n# Calculate the average and replace the range values in the same column\nfor x in cols:\n    df[x]=df[x].apply(preprocess_range)","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:04:52.900568Z","iopub.execute_input":"2023-06-03T05:04:52.900950Z","iopub.status.idle":"2023-06-03T05:04:52.932927Z","shell.execute_reply.started":"2023-06-03T05:04:52.900919Z","shell.execute_reply":"2023-06-03T05:04:52.931840Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# Statistically data representation\n\n","metadata":{}},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:04:56.117858Z","iopub.execute_input":"2023-06-03T05:04:56.118222Z","iopub.status.idle":"2023-06-03T05:04:56.213016Z","shell.execute_reply.started":"2023-06-03T05:04:56.118191Z","shell.execute_reply":"2023-06-03T05:04:56.211855Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Now, let’s see the total count of null values that every feature holds\n\n ","metadata":{}},{"cell_type":"code","source":"df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:04:59.001367Z","iopub.execute_input":"2023-06-03T05:04:59.001761Z","iopub.status.idle":"2023-06-03T05:04:59.015848Z","shell.execute_reply.started":"2023-06-03T05:04:59.001733Z","shell.execute_reply":"2023-06-03T05:04:59.014743Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Non Null value","metadata":{}},{"cell_type":"markdown","source":"# Corelation Matrix and Matrix Visualization","metadata":{}},{"cell_type":"code","source":"df.corr()","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:01.862591Z","iopub.execute_input":"2023-06-03T05:05:01.863573Z","iopub.status.idle":"2023-06-03T05:05:01.913143Z","shell.execute_reply.started":"2023-06-03T05:05:01.863515Z","shell.execute_reply":"2023-06-03T05:05:01.911964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# How much Value each class contain and Visualize","metadata":{}},{"cell_type":"code","source":"df['class'].value_counts()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:06.344222Z","iopub.execute_input":"2023-06-03T05:05:06.344600Z","iopub.status.idle":"2023-06-03T05:05:06.352961Z","shell.execute_reply.started":"2023-06-03T05:05:06.344569Z","shell.execute_reply":"2023-06-03T05:05:06.352036Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"countNoDisease = len(df[df['class'] == 0])\ncountHaveDisease = len(df[df['class'] == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease / (len(df['class']))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease / (len(df['class']))*100)))","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:10.617251Z","iopub.execute_input":"2023-06-03T05:05:10.617661Z","iopub.status.idle":"2023-06-03T05:05:10.627188Z","shell.execute_reply.started":"2023-06-03T05:05:10.617629Z","shell.execute_reply":"2023-06-03T05:05:10.626184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Check the data balancing by plot","metadata":{}},{"cell_type":"code","source":"df['class'].value_counts().plot(kind='bar',color=['salmon','lightblue'],title=\"Count of Diagnosis of kidney disease\")\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:13.970005Z","iopub.execute_input":"2023-06-03T05:05:13.970366Z","iopub.status.idle":"2023-06-03T05:05:14.292768Z","shell.execute_reply.started":"2023-06-03T05:05:13.970335Z","shell.execute_reply":"2023-06-03T05:05:14.291717Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# Here we will be checking the distribution of the age column\n\n ","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndf['age'].value_counts().sort_index().plot(kind='bar')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.title('Bar Plot of Age')\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:17.983674Z","iopub.execute_input":"2023-06-03T05:05:17.984053Z","iopub.status.idle":"2023-06-03T05:05:18.295034Z","shell.execute_reply.started":"2023-06-03T05:05:17.984023Z","shell.execute_reply":"2023-06-03T05:05:18.294070Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Finding the Correlation between the plots\n\n","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (19,19))\nsns.heatmap(df.corr(), annot = True, cmap = 'coolwarm') # looking for strong correlations with \"class\" row","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:22.123225Z","iopub.execute_input":"2023-06-03T05:05:22.123628Z","iopub.status.idle":"2023-06-03T05:05:25.096490Z","shell.execute_reply.started":"2023-06-03T05:05:22.123595Z","shell.execute_reply":"2023-06-03T05:05:25.095591Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2023-05-31T09:20:36.122732Z","iopub.execute_input":"2023-05-31T09:20:36.123111Z","iopub.status.idle":"2023-05-31T09:20:36.129403Z","shell.execute_reply.started":"2023-05-31T09:20:36.123080Z","shell.execute_reply":"2023-05-31T09:20:36.128496Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Now dropping the null values.\n","metadata":{}},{"cell_type":"code","source":"df.shape[0], df.dropna().shape[0]\ndf.dropna(inplace=True)\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:31.353279Z","iopub.execute_input":"2023-06-03T05:05:31.353706Z","iopub.status.idle":"2023-06-03T05:05:31.364346Z","shell.execute_reply.started":"2023-06-03T05:05:31.353673Z","shell.execute_reply":"2023-06-03T05:05:31.363211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Split the dataset","metadata":{}},{"cell_type":"code","source":"X = df.loc[:, df.columns != 'class']\ny=df['class']\nX_train, X_test, y_train, y_test = train_test_split(X,y, stratify = y, shuffle = True)\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:34.886195Z","iopub.execute_input":"2023-06-03T05:05:34.886589Z","iopub.status.idle":"2023-06-03T05:05:34.897638Z","shell.execute_reply.started":"2023-06-03T05:05:34.886554Z","shell.execute_reply":"2023-06-03T05:05:34.895324Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Standardlization and normalization\n  Standardlization for numerical columns and OneHotEncoder for Categorical Columns","metadata":{}},{"cell_type":"code","source":"from sklearn.compose import make_column_selector as selector\n\nnumerical_columns_selector = selector(dtype_exclude=object)\ncategorical_columns_selector = selector(dtype_include=object)\n\nnumerical_columns = numerical_columns_selector(X)\ncategorical_columns = categorical_columns_selector(X)","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:44.258742Z","iopub.execute_input":"2023-06-03T05:05:44.259131Z","iopub.status.idle":"2023-06-03T05:05:44.285288Z","shell.execute_reply.started":"2023-06-03T05:05:44.259101Z","shell.execute_reply":"2023-06-03T05:05:44.284200Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\n\ncategorical_preprocessor = OneHotEncoder(handle_unknown=\"ignore\")\nnumerical_preprocessor = StandardScaler()","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:47.554037Z","iopub.execute_input":"2023-06-03T05:05:47.554449Z","iopub.status.idle":"2023-06-03T05:05:47.559687Z","shell.execute_reply.started":"2023-06-03T05:05:47.554418Z","shell.execute_reply":"2023-06-03T05:05:47.558539Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.compose import ColumnTransformer\n\npreprocessor = ColumnTransformer([\n    ('one-hot-encoder', categorical_preprocessor, categorical_columns),\n    ('standard_scaler', numerical_preprocessor, numerical_columns)])","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:05:50.262285Z","iopub.execute_input":"2023-06-03T05:05:50.263151Z","iopub.status.idle":"2023-06-03T05:05:50.268472Z","shell.execute_reply.started":"2023-06-03T05:05:50.263115Z","shell.execute_reply":"2023-06-03T05:05:50.267449Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Define differents Model Pipeline and Evaluate","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# Model1","metadata":{}},{"cell_type":"markdown","source":"Preprocessor and Logisticregression","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\n\nmodel1 = make_pipeline(preprocessor, LogisticRegression(max_iter=500))\nmodel1","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:06:30.439671Z","iopub.execute_input":"2023-06-03T05:06:30.440346Z","iopub.status.idle":"2023-06-03T05:06:30.469180Z","shell.execute_reply.started":"2023-06-03T05:06:30.440314Z","shell.execute_reply":"2023-06-03T05:06:30.468171Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model1.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:06:42.507233Z","iopub.execute_input":"2023-06-03T05:06:42.507638Z","iopub.status.idle":"2023-06-03T05:06:42.548999Z","shell.execute_reply.started":"2023-06-03T05:06:42.507606Z","shell.execute_reply":"2023-06-03T05:06:42.547968Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model1.score(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:06:46.148008Z","iopub.execute_input":"2023-06-03T05:06:46.148387Z","iopub.status.idle":"2023-06-03T05:06:46.159714Z","shell.execute_reply.started":"2023-06-03T05:06:46.148348Z","shell.execute_reply":"2023-06-03T05:06:46.158731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model1.score(X_test,y_test)\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:06:48.344411Z","iopub.execute_input":"2023-06-03T05:06:48.345149Z","iopub.status.idle":"2023-06-03T05:06:48.356979Z","shell.execute_reply.started":"2023-06-03T05:06:48.345113Z","shell.execute_reply":"2023-06-03T05:06:48.356021Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y=model1.predict(X)\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:06:09.425290Z","iopub.execute_input":"2023-06-03T05:06:09.425664Z","iopub.status.idle":"2023-06-03T05:06:09.434191Z","shell.execute_reply.started":"2023-06-03T05:06:09.425636Z","shell.execute_reply":"2023-06-03T05:06:09.433052Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Observe Risk factor for Chronic Kidney Diseases","metadata":{}},{"cell_type":"code","source":"coefficients1 = model1[1].coef_\n\npd.DataFrame(coefficients1, columns=X.columns)\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:37:44.442720Z","iopub.execute_input":"2023-06-03T05:37:44.443310Z","iopub.status.idle":"2023-06-03T05:37:44.469990Z","shell.execute_reply.started":"2023-06-03T05:37:44.443274Z","shell.execute_reply":"2023-06-03T05:37:44.468711Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\n\n\ncoefficient_series = pd.Series(coefficients1[0], index=X.columns)\n\nplt.figure(figsize=(10, 6))  \n\ncoefficient_abs = coefficient_series.abs().sort_values(ascending=False)\n\nplt.bar(coefficient_abs.index, coefficient_abs)\n\nplt.xticks(rotation=90)  \n\nplt.xlabel('X Variables')\nplt.ylabel('Coefficient Magnitude')\nplt.title('Coefficient Plot')\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:37:47.937961Z","iopub.execute_input":"2023-06-03T05:37:47.938328Z","iopub.status.idle":"2023-06-03T05:37:48.487607Z","shell.execute_reply.started":"2023-06-03T05:37:47.938300Z","shell.execute_reply":"2023-06-03T05:37:48.486528Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:16:31.158956Z","iopub.execute_input":"2023-06-03T05:16:31.159325Z","iopub.status.idle":"2023-06-03T05:16:31.164312Z","shell.execute_reply.started":"2023-06-03T05:16:31.159295Z","shell.execute_reply":"2023-06-03T05:16:31.162878Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\n\n\ncoefficient_series = pd.Series(coefficients1[0], index=X.columns)\n\n\nplt.figure(figsize=(10, 6))  \ncoefficient_sorted = coefficient_series.sort_values()\n\nplt.bar(coefficient_sorted.index, coefficient_sorted)\n\nplt.xticks(rotation=90)  \nplt.xlabel('X Variables')\nplt.ylabel('Coefficient Value')\nplt.title('Coefficient Plot')\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:38:13.123470Z","iopub.execute_input":"2023-06-03T05:38:13.124517Z","iopub.status.idle":"2023-06-03T05:38:13.599265Z","shell.execute_reply.started":"2023-06-03T05:38:13.124483Z","shell.execute_reply":"2023-06-03T05:38:13.596768Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model2\n\n","metadata":{}},{"cell_type":"code","source":"Using only LogisticRegression","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\n\n\nlogreg.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:17:19.341594Z","iopub.execute_input":"2023-06-03T05:17:19.342794Z","iopub.status.idle":"2023-06-03T05:17:19.382616Z","shell.execute_reply.started":"2023-06-03T05:17:19.342758Z","shell.execute_reply":"2023-06-03T05:17:19.380515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"logreg.score(X_train,y_train)\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:17:25.523786Z","iopub.execute_input":"2023-06-03T05:17:25.524186Z","iopub.status.idle":"2023-06-03T05:17:25.536573Z","shell.execute_reply.started":"2023-06-03T05:17:25.524155Z","shell.execute_reply":"2023-06-03T05:17:25.535546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nlogreg.score(X_test,y_test)\ncoefficient=logreg.coef_","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:18:19.368276Z","iopub.execute_input":"2023-06-03T05:18:19.368681Z","iopub.status.idle":"2023-06-03T05:18:19.379254Z","shell.execute_reply.started":"2023-06-03T05:18:19.368650Z","shell.execute_reply":"2023-06-03T05:18:19.378025Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\n\n\ncoefficient_series = pd.Series(coefficient[0], index=X.columns)\n\nplt.figure(figsize=(10, 6))  \ncoefficient_sorted = coefficient_series.sort_values()\n\nplt.bar(coefficient_sorted.index, coefficient_sorted)\n\nplt.xticks(rotation=90)  \nplt.xlabel('X Variables')\nplt.ylabel('Coefficient Value')\nplt.title('Coefficient Plot')\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:18:23.570224Z","iopub.execute_input":"2023-06-03T05:18:23.570670Z","iopub.status.idle":"2023-06-03T05:18:24.049944Z","shell.execute_reply.started":"2023-06-03T05:18:23.570637Z","shell.execute_reply":"2023-06-03T05:18:24.047524Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model3","metadata":{}},{"cell_type":"markdown","source":"Using LinearRegression","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# As\nregression_model = make_pipeline(preprocessor, LinearRegression())\n\nregression_model.fit(X, y)\n\nregression_model.score(X_train,y_train)\nprint('Train_score:',regression_model.score(X_train,y_train))\n\n\nprint('Test_score',regression_model.score(X_test,y_test))\n\n\ncoefficients = regression_model[1].coef_\n\ncoefficients_df = pd.DataFrame({'Feature': X.columns, 'Coefficient': coefficients})\n\ncoefficients_df = coefficients_df.sort_values(by='Coefficient', ascending=False)\n\nplt.figure(figsize=(10, 6))  \nplt.bar(coefficients_df['Feature'], coefficients_df['Coefficient'])\nplt.xticks(rotation=90)  \nplt.xlabel('Features')\nplt.ylabel('Coefficient')\nplt.title('Coefficient Plot')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:48:51.588564Z","iopub.execute_input":"2023-06-03T05:48:51.589468Z","iopub.status.idle":"2023-06-03T05:48:52.052606Z","shell.execute_reply.started":"2023-06-03T05:48:51.589436Z","shell.execute_reply":"2023-06-03T05:48:52.051608Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model4","metadata":{}},{"cell_type":"markdown","source":"Using DecisionTreeClassification","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\n\n\ntree_model = DecisionTreeClassifier()\n\ntree_model.fit(X_train, y_train)\n\n\nprint('Train_score:',tree_model.score(X_train,y_train))\n\n\nprint('Test_score',tree_model.score(X_test,y_test))\n\n\n\n\nfeature_importances = tree_model.feature_importances_\n\nimportance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})\nimportance_df.sort_values(by='Importance', ascending=False, inplace=True)\n\nplt.figure(figsize=(10, 6)) \nplt.bar(importance_df['Feature'], importance_df['Importance'])\nplt.xticks(rotation=90)  \nplt.xlabel('Features')\nplt.ylabel('Importance')\nplt.title('Feature Importance')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:49:27.842361Z","iopub.execute_input":"2023-06-03T05:49:27.842747Z","iopub.status.idle":"2023-06-03T05:49:28.320484Z","shell.execute_reply.started":"2023-06-03T05:49:27.842716Z","shell.execute_reply":"2023-06-03T05:49:28.319511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\n\ntree_model = DecisionTreeClassifier()\ntree_model.fit(X_train, y_train)\n\nprint('Train_score:', tree_model.score(X_train, y_train))\nprint('Test_score', tree_model.score(X_test, y_test))\n\nfeature_importances = tree_model.feature_importances_\n\nimportance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})\nimportance_df.sort_values(by='Importance', ascending=False, inplace=True)\n\nplt.figure(figsize=(10, 6))\nplt.pie(importance_df['Importance'], labels=importance_df['Feature'], autopct='%1.1f%%')\nplt.title('Feature Importance')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-06-03T05:51:59.987720Z","iopub.execute_input":"2023-06-03T05:51:59.988618Z","iopub.status.idle":"2023-06-03T05:52:00.410167Z","shell.execute_reply.started":"2023-06-03T05:51:59.988577Z","shell.execute_reply":"2023-06-03T05:52:00.409094Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}